"""
sensorlib.repy -- This is the core of the sensor library. 
Check out SL4A's *Facade's into Android sensors,
http://www.mithril.com.au/android/doc/index.html

Albert Rafetseder, Datenkugerl e.U., Austria
Yanyan Zhuang, UBC, Canada

Change log:
v 0.0.1, 20140101 1200 AR
  Refactored off test_phone.repy, which itself was based on an older 
  rendition of test_sensors.repy

v 0.0.2, 20140215 1400 YZ
  Refactored the core part out from demo code sensor_demo_script.r2py

v 0.0.3, 20140304 1400 YZ
  Removed sensor dict, facade and methodlists. Users need to start/stop 
  certain sensing function by themselves, but this gives 
  them more flexibility.

"""

# constants and global variables
AP_PORT = 45678
mycontext['id'] = 0


def usage():
  log("""
Something went wrong in your code..
""")
  # we need a better log than above


def send_rpc_request(socket_object, method_name, parameter_list):
  # Sanitize the parameters, None becomes an empty list
  parameter_list = parameter_list or []
  json_request_string = '{"params": ' + str(parameter_list) + ', "id": ' + \
    str(mycontext['id']) + ', "method": "' + \
    str(method_name) + '"}\n'

  mycontext['id'] += 1

  bytes_sent = 0                                                              
  while bytes_sent<len(json_request_string):
    sendstring = json_request_string[bytes_sent:]
    bytes_sent += socket_object.send(sendstring)
    #log(sendstring)



def get_rpc_response(socket_object, timeout=10):
  received_string = ""
  time_started = getruntime()
  while getruntime() < time_started+timeout:
    try:
      chunk = socket_object.recv(1024)
      received_string += chunk
    except SocketWouldBlockError:
      if received_string != "":
        break
      pass
    except SocketClosedRemote:
      pass
  
  return received_string



def get_connectionport():
  mycontext['ap_port'] = AP_PORT
  return mycontext['ap_port']



def getconnection(ap_port):
  ports = list(getresources()[0]['connport'])
  
  for port in ports:
    port = int(port) 
    try:
      sl4a_socket = openconnection("127.0.0.1", ap_port, "127.0.0.1", port, 5)
      log("Using port", port, "to get sensor data.\n")
      return sl4a_socket
    except Exception as e:
      log("Using port", port, "had a problem:", str(e), '\n')
      continue

  log("No ports available.\n")
  exitall()



def request_data(sl4a_socket, method, args):

  send_rpc_request(sl4a_socket, method, args)
  response = get_rpc_response(sl4a_socket)
  
  parsed = json_parse(str(response))
  error = parsed['error']

  if error != None:
    log("Something went wrong!\n")
    raise
  else:
    result = parsed['result']
    log(str(method), "data: ", result, '\n')
    return result

